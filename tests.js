// Importa o Sequelize e o dotenv para carregar as vari√°veis de ambiente
const { Sequelize, DataTypes } = require("sequelize");
require("dotenv").config();

// Configura√ß√£o do Sequelize usando as vari√°veis de ambiente
const sequelize = new Sequelize(
  process.env.DB_DATABASE,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_SERVER,
    port: process.env.DB_PORT,
    dialect: "mysql",
    logging: console.log, // Opcional: para ver o SQL gerado no console
  }
);

// --- Defini√ß√£o do Modelo de Usu√°rio (Users) ---
// Define o modelo 'Users' para mapear para a tabela 'Users' no banco de dados.
// √â importante que o modelo corresponda exatamente √† sua estrutura de tabela.
const User = sequelize.define(
  "User",
  {
    id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
      allowNull: false,
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
    },
    userType: {
      type: DataTypes.ENUM("admin", "orientador", "orientando"),
      allowNull: false,
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false,
    },
  },
  {
    tableName: "Users", // Especifica o nome da tabela no banco
    timestamps: false, // Desabilita timestamps autom√°ticos (createdAt, updatedAt)
  }
);

// --- Fun√ß√£o para Testar a Conex√£o e Inserir um Usu√°rio ---
async function testConnectionAndInsertUser() {
  try {
    // 1. Testa a conex√£o com o banco de dados
    await sequelize.authenticate();
    console.log("‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!");

    // 2. Sincroniza o modelo com o banco de dados
    // O { alter: true } tenta ajustar a tabela existente sem perder dados,
    // garantindo que o modelo e a tabela estejam alinhados.
    // Voc√™ pode remover essa op√ß√£o se a tabela j√° estiver perfeita.
    await User.sync({ alter: true });
    console.log("‚úÖ Modelo de Usu√°rio sincronizado com a tabela Users.");

    // 3. Insere um novo usu√°rio na tabela
    // Substitua os dados de exemplo pelos que voc√™ deseja inserir
    const newUser = await User.create({
      name: "Maria de Teste",
      email: "maria.teste@example.com",
      userType: "orientando", // Substitua por 'admin', 'orientador' ou 'orientando'
      password: "senha_segura_123",
    });

    console.log(
      `üéâ Novo usu√°rio inserido com sucesso: ${newUser.name} (ID: ${newUser.id})`
    );
  } catch (error) {
    console.error(
      "‚ùå N√£o foi poss√≠vel se conectar ao banco de dados ou inserir o usu√°rio:",
      error
    );
  } finally {
    // 4. Fecha a conex√£o para liberar recursos
    await sequelize.close();
    console.log("Conex√£o fechada.");
  }
}

// Executa a fun√ß√£o
testConnectionAndInsertUser();
